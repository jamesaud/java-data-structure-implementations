1)  a.
	  a b c d e f
	a 0 0 1 0 1 0
	b 0 0 1 1 0 1
	c 1 1 0 1 0 1
	d 0 0 1 0 0 1
	e 0 0 1 0 1 0
	f 0 1 1 1 1 0

    b. [a, b, c, d, e, f]
 Index:[0  1  2  3  4  5]
	a: [2, 4]
	b: [2, 5]
	c: [0, 1, 3, 5]
	d: [2, 5]
	e: [0, 5]
	f: [1, 2, 3, 4]



    c. DFS

    Starting at "b":     
    b -> c -> a -> e -> f -> d 

    d. BFS
    b -> c
    b -> f
    c -> a
    c -> d
    f -> e
    
2)
	Ideas gathered from: http://stackoverflow.com/questions/23773593/how-to-find-root-of-a-directed-acyclic-graph
	The complexity is linear.
	
	We can basically run a DFS search over the graph, and everytime that we have to jump to a new node we've found a root.
	roots = {}
	
	adjacency matrix: (i,j)   node: k
	for k in 1 to N    //loop through all nodes
  		for i in 1 to N  //to check adjacencies
    			if adjacencies[i, k] > 0
      				continue with next k value
 	 add k to roots  //if there is all 0s, we add k to roots
